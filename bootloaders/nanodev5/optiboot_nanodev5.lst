
optiboot_nanodev5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007f80  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00007c00  00007c00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000405  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006ce  00000000  00000000  0000042d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000281  00000000  00000000  00000afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ef  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000011c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e6  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000563  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:

//  DBG_LED1_ON;
//  DBG_LED2_OFF;

  // Adaboot no-wait mod
  ch = MCUSR;
    7c00:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7c02:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7c04:	81 ff       	sbrs	r24, 1
    7c06:	a6 d1       	rcall	.+844    	; 0x7f54 <appStart>
    7c08:	85 e0       	ldi	r24, 0x05	; 5

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7c0a:	80 93 81 00 	sts	0x0081, r24
    7c0e:	82 e0       	ldi	r24, 0x02	; 2
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7c10:	80 93 c0 00 	sts	0x00C0, r24
    7c14:	88 e1       	ldi	r24, 0x18	; 24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7c16:	80 93 c1 00 	sts	0x00C1, r24
    7c1a:	96 e0       	ldi	r25, 0x06	; 6
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7c1c:	90 93 c2 00 	sts	0x00C2, r25
    7c20:	90 e1       	ldi	r25, 0x10	; 16
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7c22:	90 93 c4 00 	sts	0x00C4, r25
    7c26:	80 93 60 00 	sts	0x0060, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7c2a:	8e e0       	ldi	r24, 0x0E	; 14
  WDTCSR = x;
    7c2c:	80 93 60 00 	sts	0x0060, r24
    7c30:	25 9a       	sbi	0x04, 5	; 4

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7c32:	26 e0       	ldi	r18, 0x06	; 6
    7c34:	80 e3       	ldi	r24, 0x30	; 48
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c36:	9c ef       	ldi	r25, 0xFC	; 252
    7c38:	31 e0       	ldi	r19, 0x01	; 1
    TIFR1 = _BV(TOV1);
    7c3a:	90 93 85 00 	sts	0x0085, r25
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c3e:	80 93 84 00 	sts	0x0084, r24
    7c42:	36 bb       	out	0x16, r19	; 22
    TIFR1 = _BV(TOV1);
    7c44:	b0 9b       	sbis	0x16, 0	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c46:	fe cf       	rjmp	.-4      	; 0x7c44 <main+0x44>
    7c48:	1d 9a       	sbi	0x03, 5	; 3
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7c4a:	a8 95       	wdr
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7c4c:	21 50       	subi	r18, 0x01	; 1
    7c4e:	a9 f7       	brne	.-22     	; 0x7c3a <main+0x3a>
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7c50:	08 e1       	ldi	r16, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7c52:	b8 e0       	ldi	r27, 0x08	; 8
  WDTCSR = x;
    7c54:	fb 2e       	mov	r15, r27
    7c56:	ee 24       	eor	r14, r14
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7c58:	e3 94       	inc	r14
    7c5a:	c5 e0       	ldi	r28, 0x05	; 5
        addrPtr += 2;
      } while (--ch);
     
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7c5c:	dc 2e       	mov	r13, r28
    7c5e:	d1 e1       	ldi	r29, 0x11	; 17
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7c60:	cd 2e       	mov	r12, r29
    7c62:	13 e0       	ldi	r17, 0x03	; 3
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7c64:	a6 d0       	rcall	.+332    	; 0x7db2 <getch>
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7c66:	81 34       	cpi	r24, 0x41	; 65
    7c68:	29 f4       	brne	.+10     	; 0x7c74 <main+0x74>

    if(ch == STK_GET_PARAMETER) {
    7c6a:	81 e0       	ldi	r24, 0x01	; 1
    7c6c:	82 d1       	rcall	.+772    	; 0x7f72 <getNch>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    7c6e:	83 e0       	ldi	r24, 0x03	; 3
    7c70:	99 d0       	rcall	.+306    	; 0x7da4 <putch>
    7c72:	95 c0       	rjmp	.+298    	; 0x7d9e <main+0x19e>
      putch(0x03);
    7c74:	82 34       	cpi	r24, 0x42	; 66
    7c76:	19 f4       	brne	.+6      	; 0x7c7e <main+0x7e>
    7c78:	84 e1       	ldi	r24, 0x14	; 20
    7c7a:	7b d1       	rcall	.+758    	; 0x7f72 <getNch>
    }
    else if(ch == STK_SET_DEVICE) {
    7c7c:	90 c0       	rjmp	.+288    	; 0x7d9e <main+0x19e>
    7c7e:	85 34       	cpi	r24, 0x45	; 69
      // SET DEVICE is ignored
      getNch(20);
    7c80:	19 f4       	brne	.+6      	; 0x7c88 <main+0x88>
    7c82:	85 e0       	ldi	r24, 0x05	; 5
    7c84:	76 d1       	rcall	.+748    	; 0x7f72 <getNch>
    7c86:	8b c0       	rjmp	.+278    	; 0x7d9e <main+0x19e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7c88:	85 35       	cpi	r24, 0x55	; 85
    7c8a:	71 f4       	brne	.+28     	; 0x7ca8 <main+0xa8>
      // SET DEVICE EXT is ignored
      getNch(5);
    7c8c:	92 d0       	rcall	.+292    	; 0x7db2 <getch>
    7c8e:	c8 2f       	mov	r28, r24
    7c90:	90 d0       	rcall	.+288    	; 0x7db2 <getch>
    7c92:	2c 2f       	mov	r18, r28
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7c94:	30 e0       	ldi	r19, 0x00	; 0
    7c96:	38 2b       	or	r19, r24
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7c98:	22 0f       	add	r18, r18
    7c9a:	33 1f       	adc	r19, r19
    7c9c:	30 93 01 02 	sts	0x0201, r19
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7ca0:	20 93 00 02 	sts	0x0200, r18
    7ca4:	60 d1       	rcall	.+704    	; 0x7f66 <verifySpace>
    7ca6:	7b c0       	rjmp	.+246    	; 0x7d9e <main+0x19e>
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7ca8:	86 35       	cpi	r24, 0x56	; 86
    7caa:	29 f4       	brne	.+10     	; 0x7cb6 <main+0xb6>
      address = newAddress;
    7cac:	84 e0       	ldi	r24, 0x04	; 4
    7cae:	61 d1       	rcall	.+706    	; 0x7f72 <getNch>
    7cb0:	80 e0       	ldi	r24, 0x00	; 0
    7cb2:	78 d0       	rcall	.+240    	; 0x7da4 <putch>
      verifySpace();
    7cb4:	74 c0       	rjmp	.+232    	; 0x7d9e <main+0x19e>
    7cb6:	84 36       	cpi	r24, 0x64	; 100
    7cb8:	09 f0       	breq	.+2      	; 0x7cbc <main+0xbc>
    }
    else if(ch == STK_UNIVERSAL) {
    7cba:	46 c0       	rjmp	.+140    	; 0x7d48 <main+0x148>
    7cbc:	84 d0       	rcall	.+264    	; 0x7dc6 <getLen>
      // UNIVERSAL command is ignored
      getNch(4);
    7cbe:	e0 91 00 02 	lds	r30, 0x0200
    7cc2:	f0 91 01 02 	lds	r31, 0x0201
      putch(0x00);
    7cc6:	e1 15       	cp	r30, r1
    7cc8:	80 e7       	ldi	r24, 0x70	; 112
    7cca:	f8 07       	cpc	r31, r24
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ccc:	10 f4       	brcc	.+4      	; 0x7cd2 <main+0xd2>
    7cce:	17 bf       	out	0x37, r17	; 55
    7cd0:	e8 95       	spm
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getLen();
    7cd2:	c0 e0       	ldi	r28, 0x00	; 0
    7cd4:	d1 e0       	ldi	r29, 0x01	; 1

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7cd6:	6d d0       	rcall	.+218    	; 0x7db2 <getch>
    7cd8:	89 93       	st	Y+, r24
    7cda:	80 91 02 02 	lds	r24, 0x0202
    7cde:	81 50       	subi	r24, 0x01	; 1
    7ce0:	80 93 02 02 	sts	0x0202, r24
    7ce4:	81 11       	cpse	r24, r1
    7ce6:	f7 cf       	rjmp	.-18     	; 0x7cd6 <main+0xd6>
    7ce8:	e0 91 00 02 	lds	r30, 0x0200

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7cec:	f0 91 01 02 	lds	r31, 0x0201
      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
     
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7cf0:	e1 15       	cp	r30, r1
    7cf2:	80 e7       	ldi	r24, 0x70	; 112
      while (--length);
    7cf4:	f8 07       	cpc	r31, r24
    7cf6:	10 f0       	brcs	.+4      	; 0x7cfc <main+0xfc>
    7cf8:	17 bf       	out	0x37, r17	; 55
    7cfa:	e8 95       	spm
    7cfc:	34 d1       	rcall	.+616    	; 0x7f66 <verifySpace>
    7cfe:	07 b6       	in	r0, 0x37	; 55
    7d00:	00 fc       	sbrc	r0, 0

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7d02:	fd cf       	rjmp	.-6      	; 0x7cfe <main+0xfe>
    7d04:	40 91 00 02 	lds	r20, 0x0200
    7d08:	50 91 01 02 	lds	r21, 0x0201
    7d0c:	9a 01       	movw	r18, r20
    7d0e:	a0 e0       	ldi	r26, 0x00	; 0
    7d10:	b1 e0       	ldi	r27, 0x01	; 1
    7d12:	8c 91       	ld	r24, X
    7d14:	12 96       	adiw	r26, 0x02	; 2

      // Read command terminator, start reply
      verifySpace();
    7d16:	fd 01       	movw	r30, r26
    7d18:	31 97       	sbiw	r30, 0x01	; 1
     
      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7d1a:	60 81       	ld	r22, Z
    7d1c:	90 e0       	ldi	r25, 0x00	; 0
    7d1e:	96 2b       	or	r25, r22
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
    7d20:	f9 01       	movw	r30, r18
    7d22:	0c 01       	movw	r0, r24
    7d24:	e7 be       	out	0x37, r14	; 55
    7d26:	e8 95       	spm
    7d28:	11 24       	eor	r1, r1
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
    7d2a:	2e 5f       	subi	r18, 0xFE	; 254
    7d2c:	3f 4f       	sbci	r19, 0xFF	; 255
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7d2e:	a0 38       	cpi	r26, 0x80	; 128
    7d30:	f1 e0       	ldi	r31, 0x01	; 1
    7d32:	bf 07       	cpc	r27, r31
    7d34:	71 f7       	brne	.-36     	; 0x7d12 <main+0x112>
        a |= (*bufPtr++) << 8;
    7d36:	fa 01       	movw	r30, r20
    7d38:	d7 be       	out	0x37, r13	; 55
    7d3a:	e8 95       	spm
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7d3c:	07 b6       	in	r0, 0x37	; 55
    7d3e:	00 fc       	sbrc	r0, 0
    7d40:	fd cf       	rjmp	.-6      	; 0x7d3c <main+0x13c>
    7d42:	c7 be       	out	0x37, r12	; 55
    7d44:	e8 95       	spm
        addrPtr += 2;
    7d46:	2b c0       	rjmp	.+86     	; 0x7d9e <main+0x19e>
    7d48:	84 37       	cpi	r24, 0x74	; 116
      } while (--ch);
    7d4a:	b1 f4       	brne	.+44     	; 0x7d78 <main+0x178>
    7d4c:	3c d0       	rcall	.+120    	; 0x7dc6 <getLen>
    7d4e:	0b d1       	rcall	.+534    	; 0x7f66 <verifySpace>
    7d50:	e0 91 00 02 	lds	r30, 0x0200
     
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7d54:	f0 91 01 02 	lds	r31, 0x0201
      boot_spm_busy_wait();
    7d58:	cf 01       	movw	r24, r30
    7d5a:	01 96       	adiw	r24, 0x01	; 1
    7d5c:	90 93 01 02 	sts	0x0201, r25

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7d60:	80 93 00 02 	sts	0x0200, r24
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7d64:	84 91       	lpm	r24, Z
    7d66:	1e d0       	rcall	.+60     	; 0x7da4 <putch>
      // READ PAGE - we only read flash
      getLen();
    7d68:	80 91 02 02 	lds	r24, 0x0202
      verifySpace();
    7d6c:	81 50       	subi	r24, 0x01	; 1
    7d6e:	80 93 02 02 	sts	0x0202, r24
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7d72:	81 11       	cpse	r24, r1
    7d74:	ed cf       	rjmp	.-38     	; 0x7d50 <main+0x150>
    7d76:	13 c0       	rjmp	.+38     	; 0x7d9e <main+0x19e>
    7d78:	85 37       	cpi	r24, 0x75	; 117
    7d7a:	41 f4       	brne	.+16     	; 0x7d8c <main+0x18c>
    7d7c:	f4 d0       	rcall	.+488    	; 0x7f66 <verifySpace>
    7d7e:	8e e1       	ldi	r24, 0x1E	; 30
    7d80:	11 d0       	rcall	.+34     	; 0x7da4 <putch>
    7d82:	85 e9       	ldi	r24, 0x95	; 149
    7d84:	0f d0       	rcall	.+30     	; 0x7da4 <putch>
    7d86:	8f e0       	ldi	r24, 0x0F	; 15
    7d88:	0d d0       	rcall	.+26     	; 0x7da4 <putch>
      while (--length);
    7d8a:	09 c0       	rjmp	.+18     	; 0x7d9e <main+0x19e>
    7d8c:	81 35       	cpi	r24, 0x51	; 81
    7d8e:	31 f4       	brne	.+12     	; 0x7d9c <main+0x19c>
    7d90:	00 93 60 00 	sts	0x0060, r16
    7d94:	f0 92 60 00 	sts	0x0060, r15
    7d98:	e6 d0       	rcall	.+460    	; 0x7f66 <verifySpace>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7d9a:	01 c0       	rjmp	.+2      	; 0x7d9e <main+0x19e>
    7d9c:	e4 d0       	rcall	.+456    	; 0x7f66 <verifySpace>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7d9e:	80 e1       	ldi	r24, 0x10	; 16
    7da0:	01 d0       	rcall	.+2      	; 0x7da4 <putch>
      putch(SIGNATURE_0);
    7da2:	60 cf       	rjmp	.-320    	; 0x7c64 <main+0x64>

00007da4 <putch>:
    7da4:	90 91 c0 00 	lds	r25, 0x00C0
      putch(SIGNATURE_1);
    7da8:	95 ff       	sbrs	r25, 5
    7daa:	fc cf       	rjmp	.-8      	; 0x7da4 <putch>
    7dac:	80 93 c6 00 	sts	0x00C6, r24
      putch(SIGNATURE_2);
    7db0:	08 95       	ret

00007db2 <getch>:
    7db2:	a8 95       	wdr
    7db4:	1d 9a       	sbi	0x03, 5	; 3
    }
    else if (ch == 'Q') {
    7db6:	80 91 c0 00 	lds	r24, 0x00C0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dba:	87 ff       	sbrs	r24, 7
    7dbc:	fc cf       	rjmp	.-8      	; 0x7db6 <getch+0x4>
  WDTCSR = x;
    7dbe:	80 91 c6 00 	lds	r24, 0x00C6
      putch(SIGNATURE_2);
    }
    else if (ch == 'Q') {
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    7dc2:	1d 9a       	sbi	0x03, 5	; 3
    7dc4:	08 95       	ret

00007dc6 <getLen>:
    7dc6:	f5 df       	rcall	.-22     	; 0x7db2 <getch>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7dc8:	f4 df       	rcall	.-24     	; 0x7db2 <getch>
    7dca:	80 93 02 02 	sts	0x0202, r24
    }
    putch(STK_OK);
    7dce:	f1 cf       	rjmp	.-30     	; 0x7db2 <getch>

00007dd0 <watchdogConfig>:
    7dd0:	e0 e6       	ldi	r30, 0x60	; 96
  }
    7dd2:	f0 e0       	ldi	r31, 0x00	; 0
#endif

uint8_t getLen() {
  getch();
  length = getch();
  return getch();
    7dd4:	98 e1       	ldi	r25, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dd6:	90 83       	st	Z, r25
    7dd8:	80 83       	st	Z, r24
    7dda:	08 95       	ret

00007ddc <rwSramData>:
    7ddc:	8e bd       	out	0x2e, r24	; 46
  WDTCSR = x;
    7dde:	0d b4       	in	r0, 0x2d	; 45
    7de0:	07 fe       	sbrs	r0, 7
}
*/


uint8_t rwSramData(uint8_t data) {
  SPDR = data;
    7de2:	fd cf       	rjmp	.-6      	; 0x7dde <rwSramData+0x2>
  while (!(SPSR & _BV(SPIF)))
    7de4:	8e b5       	in	r24, 0x2e	; 46
    7de6:	08 95       	ret

00007de8 <setSramRead>:
    7de8:	cf 93       	push	r28
    ;
  return SPDR;
    7dea:	df 93       	push	r29
} //end of rwSramData
    7dec:	ec 01       	movw	r28, r24

void setSramRead(uint16_t sramAddress) {
    7dee:	29 9a       	sbi	0x05, 1	; 5
    7df0:	29 98       	cbi	0x05, 1	; 5
    7df2:	83 e0       	ldi	r24, 0x03	; 3
  deselectSS;            // deselect if still selected
    7df4:	f3 df       	rcall	.-26     	; 0x7ddc <rwSramData>
  selectSS;              // select now
    7df6:	8d 2f       	mov	r24, r29
  rwSramData(0x03);          // read from address
    7df8:	f1 df       	rcall	.-30     	; 0x7ddc <rwSramData>
    7dfa:	8c 2f       	mov	r24, r28
    7dfc:	df 91       	pop	r29
  rwSramData(sramAddress >> 8);  // read from address
    7dfe:	cf 91       	pop	r28
    7e00:	ed cf       	rjmp	.-38     	; 0x7ddc <rwSramData>

00007e02 <checkSram>:
    7e02:	8f 92       	push	r8
  rwSramData(sramAddress); 
    7e04:	9f 92       	push	r9
} // end of read stream
    7e06:	af 92       	push	r10
    7e08:	bf 92       	push	r11
void setSramRead(uint16_t sramAddress) {
  deselectSS;            // deselect if still selected
  selectSS;              // select now
  rwSramData(0x03);          // read from address
  rwSramData(sramAddress >> 8);  // read from address
  rwSramData(sramAddress); 
    7e0a:	cf 92       	push	r12
    7e0c:	df 92       	push	r13
    "ijmp\n"
  );
}

#ifdef NANODE_SRAM
void checkSram( void ) {
    7e0e:	ef 92       	push	r14
    7e10:	ff 92       	push	r15
    7e12:	0f 93       	push	r16
    7e14:	1f 93       	push	r17
    7e16:	cf 93       	push	r28
    7e18:	df 93       	push	r29
    7e1a:	00 d0       	rcall	.+0      	; 0x7e1c <checkSram+0x1a>
    7e1c:	00 d0       	rcall	.+0      	; 0x7e1e <checkSram+0x1c>
    7e1e:	00 d0       	rcall	.+0      	; 0x7e20 <checkSram+0x1e>
    7e20:	cd b7       	in	r28, 0x3d	; 61
    7e22:	de b7       	in	r29, 0x3e	; 62
    7e24:	84 b1       	in	r24, 0x04	; 4
    7e26:	8d 62       	ori	r24, 0x2D	; 45
    7e28:	84 b9       	out	0x04, r24	; 4
    7e2a:	80 e5       	ldi	r24, 0x50	; 80
    7e2c:	8c bd       	out	0x2c, r24	; 44
    7e2e:	29 98       	cbi	0x05, 1	; 5
  setupDDRB;
    7e30:	81 e0       	ldi	r24, 0x01	; 1
    7e32:	d4 df       	rcall	.-88     	; 0x7ddc <rwSramData>
    7e34:	81 e4       	ldi	r24, 0x41	; 65
  setupSPI;
    7e36:	d2 df       	rcall	.-92     	; 0x7ddc <rwSramData>
    7e38:	29 9a       	sbi	0x05, 1	; 5
  selectSS;
    7e3a:	80 e0       	ldi	r24, 0x00	; 0
  rwSramData(0x01);  // write to status reg
    7e3c:	90 e0       	ldi	r25, 0x00	; 0
    7e3e:	d4 df       	rcall	.-88     	; 0x7de8 <setSramRead>
    7e40:	8e 01       	movw	r16, r28
  rwSramData(0x41);  // set sequencial  mode
    7e42:	0f 5f       	subi	r16, 0xFF	; 255
    7e44:	1f 4f       	sbci	r17, 0xFF	; 255
    7e46:	7e 01       	movw	r14, r28
  deselectSS;
    7e48:	25 e0       	ldi	r18, 0x05	; 5
//  DBG_LED2_OFF;

  uint32_t magic;
  uint16_t imageSize;
  uint8_t *srptr;
  setSramRead(0);
    7e4a:	e2 0e       	add	r14, r18
    7e4c:	f1 1c       	adc	r15, r1
    7e4e:	8f ef       	ldi	r24, 0xFF	; 255
    7e50:	c5 df       	rcall	.-118    	; 0x7ddc <rwSramData>
    7e52:	f8 01       	movw	r30, r16
    7e54:	81 93       	st	Z+, r24
    7e56:	8f 01       	movw	r16, r30
    7e58:	ee 15       	cp	r30, r14
    7e5a:	ff 05       	cpc	r31, r15
    7e5c:	c1 f7       	brne	.-16     	; 0x7e4e <checkSram+0x4c>
    7e5e:	8f ef       	ldi	r24, 0xFF	; 255
  srptr = (uint8_t*)&magic;
  uint8_t i = 0;
  for( i=0; i<4; i++ ) {
    *srptr++ = rwSramData(0xFF);
    7e60:	bd df       	rcall	.-134    	; 0x7ddc <rwSramData>
    7e62:	8d 83       	std	Y+5, r24	; 0x05
    7e64:	8f ef       	ldi	r24, 0xFF	; 255
    7e66:	ba df       	rcall	.-140    	; 0x7ddc <rwSramData>
    7e68:	8e 83       	std	Y+6, r24	; 0x06
    7e6a:	89 81       	ldd	r24, Y+1	; 0x01
  uint16_t imageSize;
  uint8_t *srptr;
  setSramRead(0);
  srptr = (uint8_t*)&magic;
  uint8_t i = 0;
  for( i=0; i<4; i++ ) {
    7e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e6e:	ab 81       	ldd	r26, Y+3	; 0x03
    7e70:	bc 81       	ldd	r27, Y+4	; 0x04
    *srptr++ = rwSramData(0xFF);
  }
  srptr = (uint8_t*)&imageSize;
  *srptr++ = rwSramData(0xFF);
    7e72:	81 3c       	cpi	r24, 0xC1	; 193
    7e74:	90 4f       	sbci	r25, 0xF0	; 240
    7e76:	a5 4a       	sbci	r26, 0xA5	; 165
    7e78:	b9 47       	sbci	r27, 0x79	; 121
  *srptr++ = rwSramData(0xFF);
    7e7a:	09 f0       	breq	.+2      	; 0x7e7e <checkSram+0x7c>
    7e7c:	58 c0       	rjmp	.+176    	; 0x7f2e <checkSram+0x12c>
    7e7e:	2d 81       	ldd	r18, Y+5	; 0x05
    7e80:	3e 81       	ldd	r19, Y+6	; 0x06
  if( magic == 0x79A5F0C1 ) {
    7e82:	c9 01       	movw	r24, r18
    7e84:	88 0f       	add	r24, r24
    7e86:	89 2f       	mov	r24, r25
    7e88:	88 1f       	adc	r24, r24
    7e8a:	99 0b       	sbc	r25, r25
    7e8c:	91 95       	neg	r25
    7e8e:	d8 2e       	mov	r13, r24
    7e90:	2f 77       	andi	r18, 0x7F	; 127
    7e92:	33 27       	eor	r19, r19
    7e94:	23 2b       	or	r18, r19
//  	flash_led(10);
//	DBG_LED1_ON;
//	DBG_LED2_OFF;

	uint16_t pagenumber = 0;
	uint8_t numPages = imageSize / SPM_PAGESIZE;
    7e96:	19 f0       	breq	.+6      	; 0x7e9e <checkSram+0x9c>
    7e98:	dd 24       	eor	r13, r13
    7e9a:	d3 94       	inc	r13
    7e9c:	d8 0e       	add	r13, r24
    7e9e:	00 e0       	ldi	r16, 0x00	; 0
    7ea0:	10 e0       	ldi	r17, 0x00	; 0
    7ea2:	c1 2c       	mov	r12, r1
    7ea4:	63 e0       	ldi	r22, 0x03	; 3
    7ea6:	b6 2e       	mov	r11, r22
	if( imageSize % SPM_PAGESIZE > 0 )
    7ea8:	aa 24       	eor	r10, r10
    7eaa:	a3 94       	inc	r10
    7eac:	75 e0       	ldi	r23, 0x05	; 5
    7eae:	97 2e       	mov	r9, r23
		numPages++;
    7eb0:	e1 e1       	ldi	r30, 0x11	; 17
    7eb2:	8e 2e       	mov	r8, r30
    7eb4:	cd 14       	cp	r12, r13
//	DBG_LED2_ON;
//  	flash_led(10);
//	DBG_LED1_ON;
//	DBG_LED2_OFF;

	uint16_t pagenumber = 0;
    7eb6:	09 f4       	brne	.+2      	; 0x7eba <checkSram+0xb8>
    7eb8:	3a c0       	rjmp	.+116    	; 0x7f2e <checkSram+0x12c>
	uint8_t numPages = imageSize / SPM_PAGESIZE;
	if( imageSize % SPM_PAGESIZE > 0 )
		numPages++;
//	setSramRead(6);
	for( i=0; i< numPages; i++ ) {
    7eba:	e1 2c       	mov	r14, r1
{
	uint16_t i;

	eeprom_busy_wait ();

	boot_page_erase (page);
    7ebc:	ff 24       	eor	r15, r15
    7ebe:	f3 94       	inc	r15
		// Set up little-endian word.

		uint16_t w = *buf++;
		w += (*buf++) << 8;

		boot_page_fill (page + i, w);
    7ec0:	8f ef       	ldi	r24, 0xFF	; 255
    7ec2:	8c df       	rcall	.-232    	; 0x7ddc <rwSramData>
	}

	boot_page_write (page);     // Store buffer in flash page.
    7ec4:	f7 01       	movw	r30, r14
    7ec6:	81 93       	st	Z+, r24
	boot_spm_busy_wait();       // Wait until the memory is written.

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.

	boot_rww_enable ();
    7ec8:	7f 01       	movw	r14, r30
    7eca:	f0 e8       	ldi	r31, 0x80	; 128
	uint16_t pagenumber = 0;
	uint8_t numPages = imageSize / SPM_PAGESIZE;
	if( imageSize % SPM_PAGESIZE > 0 )
		numPages++;
//	setSramRead(6);
	for( i=0; i< numPages; i++ ) {
    7ecc:	ef 16       	cp	r14, r31
    7ece:	f1 e0       	ldi	r31, 0x01	; 1
    7ed0:	ff 06       	cpc	r15, r31
    7ed2:	b1 f7       	brne	.-20     	; 0x7ec0 <checkSram+0xbe>
    7ed4:	f9 99       	sbic	0x1f, 1	; 31
    7ed6:	fe cf       	rjmp	.-4      	; 0x7ed4 <checkSram+0xd2>
		//DBG_LED2_ON;
		// Fill buffer with 256 bytes from SRAM
		srptr = buff;
		int j = 0;
		for( j=0; j < SPM_PAGESIZE; j++ ) {
			*srptr++ = rwSramData(0xFF);
    7ed8:	f8 01       	movw	r30, r16
    7eda:	b7 be       	out	0x37, r11	; 55
    7edc:	e8 95       	spm
    7ede:	07 b6       	in	r0, 0x37	; 55
    7ee0:	00 fc       	sbrc	r0, 0
    7ee2:	fd cf       	rjmp	.-6      	; 0x7ede <checkSram+0xdc>
 		//DBG_LED1_OFF;
		//DBG_LED2_ON;
		// Fill buffer with 256 bytes from SRAM
		srptr = buff;
		int j = 0;
		for( j=0; j < SPM_PAGESIZE; j++ ) {
    7ee4:	80 e0       	ldi	r24, 0x00	; 0
    7ee6:	90 e0       	ldi	r25, 0x00	; 0
    7ee8:	fc 01       	movw	r30, r24
    7eea:	f3 95       	inc	r31
    7eec:	40 81       	ld	r20, Z

void boot_program_page (uint32_t page, uint8_t *buf)
{
	uint16_t i;

	eeprom_busy_wait ();
    7eee:	fc 01       	movw	r30, r24
    7ef0:	e0 0f       	add	r30, r16

	boot_page_erase (page);
    7ef2:	f1 1f       	adc	r31, r17
    7ef4:	dc 01       	movw	r26, r24
    7ef6:	af 5f       	subi	r26, 0xFF	; 255
	boot_spm_busy_wait ();      // Wait until the memory is erased.
    7ef8:	be 4f       	sbci	r27, 0xFE	; 254
    7efa:	2c 91       	ld	r18, X
    7efc:	30 e0       	ldi	r19, 0x00	; 0
    7efe:	32 2f       	mov	r19, r18
    7f00:	22 27       	eor	r18, r18
    7f02:	24 0f       	add	r18, r20
    7f04:	31 1d       	adc	r19, r1

	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.

		uint16_t w = *buf++;
    7f06:	09 01       	movw	r0, r18
    7f08:	a7 be       	out	0x37, r10	; 55
    7f0a:	e8 95       	spm
    7f0c:	11 24       	eor	r1, r1
    7f0e:	02 96       	adiw	r24, 0x02	; 2
    7f10:	80 38       	cpi	r24, 0x80	; 128
    7f12:	91 05       	cpc	r25, r1
		w += (*buf++) << 8;
    7f14:	49 f7       	brne	.-46     	; 0x7ee8 <checkSram+0xe6>
    7f16:	f8 01       	movw	r30, r16
    7f18:	97 be       	out	0x37, r9	; 55
    7f1a:	e8 95       	spm
    7f1c:	07 b6       	in	r0, 0x37	; 55
    7f1e:	00 fc       	sbrc	r0, 0

		boot_page_fill (page + i, w);
    7f20:	fd cf       	rjmp	.-6      	; 0x7f1c <checkSram+0x11a>
    7f22:	87 be       	out	0x37, r8	; 55
    7f24:	e8 95       	spm
    7f26:	00 58       	subi	r16, 0x80	; 128
	eeprom_busy_wait ();

	boot_page_erase (page);
	boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
    7f28:	1f 4f       	sbci	r17, 0xFF	; 255
    7f2a:	c3 94       	inc	r12
    7f2c:	c3 cf       	rjmp	.-122    	; 0x7eb4 <checkSram+0xb2>
    7f2e:	26 96       	adiw	r28, 0x06	; 6
		w += (*buf++) << 8;

		boot_page_fill (page + i, w);
	}

	boot_page_write (page);     // Store buffer in flash page.
    7f30:	0f b6       	in	r0, 0x3f	; 63
    7f32:	f8 94       	cli
    7f34:	de bf       	out	0x3e, r29	; 62
	boot_spm_busy_wait();       // Wait until the memory is written.
    7f36:	0f be       	out	0x3f, r0	; 63
    7f38:	cd bf       	out	0x3d, r28	; 61
    7f3a:	df 91       	pop	r29

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.

	boot_rww_enable ();
    7f3c:	cf 91       	pop	r28
    7f3e:	1f 91       	pop	r17
		//DBG_LED1_ON;
		//DBG_LED2_OFF;
		// Burn page
		boot_program_page(pagenumber,(uint8_t *)buff);

		pagenumber += SPM_PAGESIZE;
    7f40:	0f 91       	pop	r16
    7f42:	ff 90       	pop	r15
	uint16_t pagenumber = 0;
	uint8_t numPages = imageSize / SPM_PAGESIZE;
	if( imageSize % SPM_PAGESIZE > 0 )
		numPages++;
//	setSramRead(6);
	for( i=0; i< numPages; i++ ) {
    7f44:	ef 90       	pop	r14
    7f46:	df 90       	pop	r13
		boot_program_page(pagenumber,(uint8_t *)buff);

		pagenumber += SPM_PAGESIZE;
	}
  }
}
    7f48:	cf 90       	pop	r12
    7f4a:	bf 90       	pop	r11
    7f4c:	af 90       	pop	r10
    7f4e:	9f 90       	pop	r9
    7f50:	8f 90       	pop	r8
    7f52:	08 95       	ret

00007f54 <appStart>:
    7f54:	e0 e6       	ldi	r30, 0x60	; 96
    7f56:	f0 e0       	ldi	r31, 0x00	; 0
    7f58:	88 e1       	ldi	r24, 0x18	; 24
    7f5a:	80 83       	st	Z, r24
    7f5c:	10 82       	st	Z, r1
    7f5e:	51 df       	rcall	.-350    	; 0x7e02 <checkSram>
    7f60:	ee 27       	eor	r30, r30
    7f62:	ff 27       	eor	r31, r31
    7f64:	09 94       	ijmp

00007f66 <verifySpace>:
    7f66:	25 df       	rcall	.-438    	; 0x7db2 <getch>
    7f68:	80 32       	cpi	r24, 0x20	; 32
    7f6a:	09 f0       	breq	.+2      	; 0x7f6e <verifySpace+0x8>
    7f6c:	f3 df       	rcall	.-26     	; 0x7f54 <appStart>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f6e:	84 e1       	ldi	r24, 0x14	; 20
    7f70:	19 cf       	rjmp	.-462    	; 0x7da4 <putch>

00007f72 <getNch>:
    7f72:	cf 93       	push	r28
    7f74:	c8 2f       	mov	r28, r24
  WDTCSR = x;
    7f76:	1d df       	rcall	.-454    	; 0x7db2 <getch>
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
#ifdef NANODE_SRAM
  checkSram();
    7f78:	c1 50       	subi	r28, 0x01	; 1
    7f7a:	e9 f7       	brne	.-6      	; 0x7f76 <getNch+0x4>
#endif

  __asm__ __volatile__ (
    7f7c:	cf 91       	pop	r28
    7f7e:	f3 cf       	rjmp	.-26     	; 0x7f66 <verifySpace>
