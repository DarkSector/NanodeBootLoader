
optiboot_nanodev5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000386  00007c00  00007c00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000097  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003df  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001ed  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000058f  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ac  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000338  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f0  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    7c00:	84 b7       	in	r24, 0x34	; 52
//  DBG_LED1_ON;
//  DBG_LED2_OFF;

  // Adaboot no-wait mod
  ch = MCUSR;
  MCUSR = 0;
    7c02:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7c04:	81 ff       	sbrs	r24, 1
    7c06:	ab d1       	rcall	.+854    	; 0x7f5e <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7c08:	85 e0       	ldi	r24, 0x05	; 5
    7c0a:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7c0e:	82 e0       	ldi	r24, 0x02	; 2
    7c10:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7c14:	88 e1       	ldi	r24, 0x18	; 24
    7c16:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7c1a:	86 e0       	ldi	r24, 0x06	; 6
    7c1c:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7c20:	80 e1       	ldi	r24, 0x10	; 16
    7c22:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    7c26:	8e e0       	ldi	r24, 0x0E	; 14
    7c28:	d1 d0       	rcall	.+418    	; 0x7dcc <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7c2a:	56 9a       	sbi	0x0a, 6	; 10
    7c2c:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c2e:	20 e3       	ldi	r18, 0x30	; 48
    7c30:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7c32:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c34:	30 93 85 00 	sts	0x0085, r19
    7c38:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7c3c:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c3e:	b0 9b       	sbis	0x16, 0	; 22
    7c40:	fe cf       	rjmp	.-4      	; 0x7c3e <main+0x3e>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7c42:	4e 9a       	sbi	0x09, 6	; 9
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7c44:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7c46:	81 50       	subi	r24, 0x01	; 1
    7c48:	a9 f7       	brne	.-22     	; 0x7c34 <main+0x34>
    /* get character from UART */
    ch = getch();

    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    7c4a:	dd 24       	eor	r13, r13
    7c4c:	d3 94       	inc	r13
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
     
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7c4e:	45 e0       	ldi	r20, 0x05	; 5
    7c50:	e4 2e       	mov	r14, r20
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7c52:	31 e1       	ldi	r19, 0x11	; 17
    7c54:	f3 2e       	mov	r15, r19
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7c56:	ab d0       	rcall	.+342    	; 0x7dae <getch>

    if(ch == STK_GET_PARAMETER) {
    7c58:	81 34       	cpi	r24, 0x41	; 65
    7c5a:	21 f4       	brne	.+8      	; 0x7c64 <main+0x64>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    7c5c:	81 e0       	ldi	r24, 0x01	; 1
    7c5e:	8b d1       	rcall	.+790    	; 0x7f76 <verifySpace+0xc>
      putch(0x03);
    7c60:	83 e0       	ldi	r24, 0x03	; 3
    7c62:	20 c0       	rjmp	.+64     	; 0x7ca4 <main+0xa4>
    }
    else if(ch == STK_SET_DEVICE) {
    7c64:	82 34       	cpi	r24, 0x42	; 66
    7c66:	11 f4       	brne	.+4      	; 0x7c6c <main+0x6c>
      // SET DEVICE is ignored
      getNch(20);
    7c68:	84 e1       	ldi	r24, 0x14	; 20
    7c6a:	03 c0       	rjmp	.+6      	; 0x7c72 <main+0x72>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7c6c:	85 34       	cpi	r24, 0x45	; 69
    7c6e:	19 f4       	brne	.+6      	; 0x7c76 <main+0x76>
      // SET DEVICE EXT is ignored
      getNch(5);
    7c70:	85 e0       	ldi	r24, 0x05	; 5
    7c72:	81 d1       	rcall	.+770    	; 0x7f76 <verifySpace+0xc>
    7c74:	91 c0       	rjmp	.+290    	; 0x7d98 <main+0x198>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7c76:	85 35       	cpi	r24, 0x55	; 85
    7c78:	81 f4       	brne	.+32     	; 0x7c9a <main+0x9a>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7c7a:	99 d0       	rcall	.+306    	; 0x7dae <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7c7c:	08 2f       	mov	r16, r24
    7c7e:	10 e0       	ldi	r17, 0x00	; 0
    7c80:	96 d0       	rcall	.+300    	; 0x7dae <getch>
    7c82:	90 e0       	ldi	r25, 0x00	; 0
    7c84:	98 2f       	mov	r25, r24
    7c86:	88 27       	eor	r24, r24
    7c88:	80 2b       	or	r24, r16
    7c8a:	91 2b       	or	r25, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7c8c:	88 0f       	add	r24, r24
    7c8e:	99 1f       	adc	r25, r25
      address = newAddress;
    7c90:	90 93 01 02 	sts	0x0201, r25
    7c94:	80 93 00 02 	sts	0x0200, r24
    7c98:	7e c0       	rjmp	.+252    	; 0x7d96 <main+0x196>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7c9a:	86 35       	cpi	r24, 0x56	; 86
    7c9c:	29 f4       	brne	.+10     	; 0x7ca8 <main+0xa8>
      // UNIVERSAL command is ignored
      getNch(4);
    7c9e:	84 e0       	ldi	r24, 0x04	; 4
    7ca0:	6a d1       	rcall	.+724    	; 0x7f76 <verifySpace+0xc>
      putch(0x00);
    7ca2:	80 e0       	ldi	r24, 0x00	; 0
    7ca4:	7c d0       	rcall	.+248    	; 0x7d9e <putch>
    7ca6:	78 c0       	rjmp	.+240    	; 0x7d98 <main+0x198>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ca8:	84 36       	cpi	r24, 0x64	; 100
    7caa:	09 f0       	breq	.+2      	; 0x7cae <main+0xae>
    7cac:	4e c0       	rjmp	.+156    	; 0x7d4a <main+0x14a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getLen();
    7cae:	89 d0       	rcall	.+274    	; 0x7dc2 <getLen>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7cb0:	e0 91 00 02 	lds	r30, 0x0200
    7cb4:	f0 91 01 02 	lds	r31, 0x0201
    7cb8:	80 e7       	ldi	r24, 0x70	; 112
    7cba:	e0 30       	cpi	r30, 0x00	; 0
    7cbc:	f8 07       	cpc	r31, r24
    7cbe:	18 f4       	brcc	.+6      	; 0x7cc6 <main+0xc6>
    7cc0:	83 e0       	ldi	r24, 0x03	; 3
    7cc2:	87 bf       	out	0x37, r24	; 55
    7cc4:	e8 95       	spm
    7cc6:	c0 e0       	ldi	r28, 0x00	; 0
    7cc8:	d1 e0       	ldi	r29, 0x01	; 1
     
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7cca:	71 d0       	rcall	.+226    	; 0x7dae <getch>
    7ccc:	89 93       	st	Y+, r24
      while (--length);
    7cce:	80 91 02 02 	lds	r24, 0x0202
    7cd2:	81 50       	subi	r24, 0x01	; 1
    7cd4:	80 93 02 02 	sts	0x0202, r24
    7cd8:	88 23       	and	r24, r24
    7cda:	b9 f7       	brne	.-18     	; 0x7cca <main+0xca>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7cdc:	e0 91 00 02 	lds	r30, 0x0200
    7ce0:	f0 91 01 02 	lds	r31, 0x0201
    7ce4:	80 e7       	ldi	r24, 0x70	; 112
    7ce6:	e0 30       	cpi	r30, 0x00	; 0
    7ce8:	f8 07       	cpc	r31, r24
    7cea:	18 f0       	brcs	.+6      	; 0x7cf2 <main+0xf2>
    7cec:	83 e0       	ldi	r24, 0x03	; 3
    7cee:	87 bf       	out	0x37, r24	; 55
    7cf0:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    7cf2:	3b d1       	rcall	.+630    	; 0x7f6a <verifySpace>
     
      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7cf4:	07 b6       	in	r0, 0x37	; 55
    7cf6:	00 fc       	sbrc	r0, 0
    7cf8:	fd cf       	rjmp	.-6      	; 0x7cf4 <main+0xf4>
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
    7cfa:	40 91 00 02 	lds	r20, 0x0200
    7cfe:	50 91 01 02 	lds	r21, 0x0201
    7d02:	a0 e0       	ldi	r26, 0x00	; 0
    7d04:	b1 e0       	ldi	r27, 0x01	; 1
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7d06:	2c 91       	ld	r18, X
    7d08:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    7d0a:	11 96       	adiw	r26, 0x01	; 1
    7d0c:	8c 91       	ld	r24, X
    7d0e:	11 97       	sbiw	r26, 0x01	; 1
    7d10:	90 e0       	ldi	r25, 0x00	; 0
    7d12:	98 2f       	mov	r25, r24
    7d14:	88 27       	eor	r24, r24
    7d16:	82 2b       	or	r24, r18
    7d18:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    7d1a:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7d1c:	fa 01       	movw	r30, r20
    7d1e:	0c 01       	movw	r0, r24
    7d20:	d7 be       	out	0x37, r13	; 55
    7d22:	e8 95       	spm
    7d24:	11 24       	eor	r1, r1
        addrPtr += 2;
    7d26:	4e 5f       	subi	r20, 0xFE	; 254
    7d28:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    7d2a:	f1 e0       	ldi	r31, 0x01	; 1
    7d2c:	a0 38       	cpi	r26, 0x80	; 128
    7d2e:	bf 07       	cpc	r27, r31
    7d30:	51 f7       	brne	.-44     	; 0x7d06 <main+0x106>
     
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7d32:	e0 91 00 02 	lds	r30, 0x0200
    7d36:	f0 91 01 02 	lds	r31, 0x0201
    7d3a:	e7 be       	out	0x37, r14	; 55
    7d3c:	e8 95       	spm
      boot_spm_busy_wait();
    7d3e:	07 b6       	in	r0, 0x37	; 55
    7d40:	00 fc       	sbrc	r0, 0
    7d42:	fd cf       	rjmp	.-6      	; 0x7d3e <main+0x13e>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7d44:	f7 be       	out	0x37, r15	; 55
    7d46:	e8 95       	spm
    7d48:	27 c0       	rjmp	.+78     	; 0x7d98 <main+0x198>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7d4a:	84 37       	cpi	r24, 0x74	; 116
    7d4c:	b9 f4       	brne	.+46     	; 0x7d7c <main+0x17c>
      // READ PAGE - we only read flash
      getLen();
    7d4e:	39 d0       	rcall	.+114    	; 0x7dc2 <getLen>
      verifySpace();
    7d50:	0c d1       	rcall	.+536    	; 0x7f6a <verifySpace>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7d52:	e0 91 00 02 	lds	r30, 0x0200
    7d56:	f0 91 01 02 	lds	r31, 0x0201
    7d5a:	31 96       	adiw	r30, 0x01	; 1
    7d5c:	f0 93 01 02 	sts	0x0201, r31
    7d60:	e0 93 00 02 	sts	0x0200, r30
    7d64:	31 97       	sbiw	r30, 0x01	; 1
    7d66:	e4 91       	lpm	r30, Z+
    7d68:	8e 2f       	mov	r24, r30
    7d6a:	19 d0       	rcall	.+50     	; 0x7d9e <putch>
      while (--length);
    7d6c:	80 91 02 02 	lds	r24, 0x0202
    7d70:	81 50       	subi	r24, 0x01	; 1
    7d72:	80 93 02 02 	sts	0x0202, r24
    7d76:	88 23       	and	r24, r24
    7d78:	61 f7       	brne	.-40     	; 0x7d52 <main+0x152>
    7d7a:	0e c0       	rjmp	.+28     	; 0x7d98 <main+0x198>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7d7c:	85 37       	cpi	r24, 0x75	; 117
    7d7e:	39 f4       	brne	.+14     	; 0x7d8e <main+0x18e>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7d80:	f4 d0       	rcall	.+488    	; 0x7f6a <verifySpace>
      putch(SIGNATURE_0);
    7d82:	8e e1       	ldi	r24, 0x1E	; 30
    7d84:	0c d0       	rcall	.+24     	; 0x7d9e <putch>
      putch(SIGNATURE_1);
    7d86:	85 e9       	ldi	r24, 0x95	; 149
    7d88:	0a d0       	rcall	.+20     	; 0x7d9e <putch>
      putch(SIGNATURE_2);
    7d8a:	8f e0       	ldi	r24, 0x0F	; 15
    7d8c:	8b cf       	rjmp	.-234    	; 0x7ca4 <main+0xa4>
    }
    else if (ch == 'Q') {
    7d8e:	81 35       	cpi	r24, 0x51	; 81
    7d90:	11 f4       	brne	.+4      	; 0x7d96 <main+0x196>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7d92:	88 e0       	ldi	r24, 0x08	; 8
    7d94:	1b d0       	rcall	.+54     	; 0x7dcc <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7d96:	e9 d0       	rcall	.+466    	; 0x7f6a <verifySpace>
    }
    putch(STK_OK);
    7d98:	80 e1       	ldi	r24, 0x10	; 16
    7d9a:	01 d0       	rcall	.+2      	; 0x7d9e <putch>
    7d9c:	5c cf       	rjmp	.-328    	; 0x7c56 <main+0x56>

00007d9e <putch>:
  }
}

void putch(char ch) {
    7d9e:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7da0:	80 91 c0 00 	lds	r24, 0x00C0
    7da4:	85 ff       	sbrs	r24, 5
    7da6:	fc cf       	rjmp	.-8      	; 0x7da0 <putch+0x2>
  UDR0 = ch;
    7da8:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7dac:	08 95       	ret

00007dae <getch>:
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7dae:	a8 95       	wdr

#ifdef LED_DATA_FLASH
#ifdef __AVR_ATmega8__
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7db0:	4e 9a       	sbi	0x09, 6	; 9
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)));
    7db2:	80 91 c0 00 	lds	r24, 0x00C0
    7db6:	87 ff       	sbrs	r24, 7
    7db8:	fc cf       	rjmp	.-8      	; 0x7db2 <getch+0x4>
  ch = UDR0;
    7dba:	80 91 c6 00 	lds	r24, 0x00C6

#ifdef LED_DATA_FLASH
#ifdef __AVR_ATmega8__
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7dbe:	4e 9a       	sbi	0x09, 6	; 9
#endif
#endif

  return ch;
}
    7dc0:	08 95       	ret

00007dc2 <getLen>:
  } while (--count);
}
#endif

uint8_t getLen() {
  getch();
    7dc2:	f5 df       	rcall	.-22     	; 0x7dae <getch>
  length = getch();
    7dc4:	f4 df       	rcall	.-24     	; 0x7dae <getch>
    7dc6:	80 93 02 02 	sts	0x0202, r24
  return getch();
}
    7dca:	f1 cf       	rjmp	.-30     	; 0x7dae <getch>

00007dcc <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dcc:	e0 e6       	ldi	r30, 0x60	; 96
    7dce:	f0 e0       	ldi	r31, 0x00	; 0
    7dd0:	98 e1       	ldi	r25, 0x18	; 24
    7dd2:	90 83       	st	Z, r25
  WDTCSR = x;
    7dd4:	80 83       	st	Z, r24
}
    7dd6:	08 95       	ret

00007dd8 <rwSramData>:
}
*/


uint8_t rwSramData(uint8_t data) {
  SPDR = data;
    7dd8:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    7dda:	0d b4       	in	r0, 0x2d	; 45
    7ddc:	07 fe       	sbrs	r0, 7
    7dde:	fd cf       	rjmp	.-6      	; 0x7dda <rwSramData+0x2>
    ;
  return SPDR;
    7de0:	8e b5       	in	r24, 0x2e	; 46
} //end of rwSramData
    7de2:	08 95       	ret

00007de4 <setSramRead>:

void setSramRead(uint16_t sramAddress) {
    7de4:	0f 93       	push	r16
    7de6:	1f 93       	push	r17
    7de8:	8c 01       	movw	r16, r24
  deselectSS;            // deselect if still selected
    7dea:	29 9a       	sbi	0x05, 1	; 5
  selectSS;              // select now
    7dec:	29 98       	cbi	0x05, 1	; 5
  rwSramData(0x03);          // read from address
    7dee:	83 e0       	ldi	r24, 0x03	; 3
    7df0:	f3 df       	rcall	.-26     	; 0x7dd8 <rwSramData>
  rwSramData(sramAddress >> 8);  // read from address
    7df2:	81 2f       	mov	r24, r17
    7df4:	99 27       	eor	r25, r25
    7df6:	f0 df       	rcall	.-32     	; 0x7dd8 <rwSramData>
  rwSramData(sramAddress); 
    7df8:	80 2f       	mov	r24, r16
    7dfa:	ee df       	rcall	.-36     	; 0x7dd8 <rwSramData>
} // end of read stream
    7dfc:	1f 91       	pop	r17
    7dfe:	0f 91       	pop	r16
    7e00:	08 95       	ret

00007e02 <checkSram>:
    "ijmp\n"
  );
}

#ifdef NANODE_SRAM
void checkSram( void ) {
    7e02:	8f 92       	push	r8
    7e04:	9f 92       	push	r9
    7e06:	af 92       	push	r10
    7e08:	bf 92       	push	r11
    7e0a:	cf 92       	push	r12
    7e0c:	df 92       	push	r13
    7e0e:	ef 92       	push	r14
    7e10:	ff 92       	push	r15
    7e12:	0f 93       	push	r16
    7e14:	1f 93       	push	r17
    7e16:	df 93       	push	r29
    7e18:	cf 93       	push	r28
    7e1a:	00 d0       	rcall	.+0      	; 0x7e1c <checkSram+0x1a>
    7e1c:	00 d0       	rcall	.+0      	; 0x7e1e <checkSram+0x1c>
    7e1e:	00 d0       	rcall	.+0      	; 0x7e20 <checkSram+0x1e>
    7e20:	cd b7       	in	r28, 0x3d	; 61
    7e22:	de b7       	in	r29, 0x3e	; 62
  setupDDRB;
    7e24:	84 b1       	in	r24, 0x04	; 4
    7e26:	8d 62       	ori	r24, 0x2D	; 45
    7e28:	84 b9       	out	0x04, r24	; 4
  setupSPI;
    7e2a:	80 e5       	ldi	r24, 0x50	; 80
    7e2c:	8c bd       	out	0x2c, r24	; 44
  selectSS;
    7e2e:	29 98       	cbi	0x05, 1	; 5
  rwSramData(0x01);  // write to status reg
    7e30:	81 e0       	ldi	r24, 0x01	; 1
    7e32:	d2 df       	rcall	.-92     	; 0x7dd8 <rwSramData>
  rwSramData(0x41);  // set sequencial  mode
    7e34:	81 e4       	ldi	r24, 0x41	; 65
    7e36:	d0 df       	rcall	.-96     	; 0x7dd8 <rwSramData>
  deselectSS;
    7e38:	29 9a       	sbi	0x05, 1	; 5
//  DBG_LED2_OFF;

  uint32_t magic;
  uint16_t imageSize;
  uint8_t *srptr;
  setSramRead(0);
    7e3a:	80 e0       	ldi	r24, 0x00	; 0
    7e3c:	90 e0       	ldi	r25, 0x00	; 0
    7e3e:	d2 df       	rcall	.-92     	; 0x7de4 <setSramRead>
  srptr = (uint8_t*)&magic;
    7e40:	8e 01       	movw	r16, r28
    7e42:	0d 5f       	subi	r16, 0xFD	; 253
    7e44:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i = 0;
  for( i=0; i<4; i++ ) {
    7e46:	f7 e0       	ldi	r31, 0x07	; 7
    7e48:	ef 2e       	mov	r14, r31
    7e4a:	f1 2c       	mov	r15, r1
    7e4c:	ec 0e       	add	r14, r28
    7e4e:	fd 1e       	adc	r15, r29
    *srptr++ = rwSramData(0xFF);
    7e50:	8f ef       	ldi	r24, 0xFF	; 255
    7e52:	c2 df       	rcall	.-124    	; 0x7dd8 <rwSramData>
    7e54:	f8 01       	movw	r30, r16
    7e56:	81 93       	st	Z+, r24
    7e58:	8f 01       	movw	r16, r30
  uint16_t imageSize;
  uint8_t *srptr;
  setSramRead(0);
  srptr = (uint8_t*)&magic;
  uint8_t i = 0;
  for( i=0; i<4; i++ ) {
    7e5a:	ee 15       	cp	r30, r14
    7e5c:	ff 05       	cpc	r31, r15
    7e5e:	c1 f7       	brne	.-16     	; 0x7e50 <checkSram+0x4e>
    *srptr++ = rwSramData(0xFF);
  }
  srptr = (uint8_t*)&imageSize;
  *srptr++ = rwSramData(0xFF);
    7e60:	8f ef       	ldi	r24, 0xFF	; 255
    7e62:	ba df       	rcall	.-140    	; 0x7dd8 <rwSramData>
    7e64:	89 83       	std	Y+1, r24	; 0x01
  *srptr++ = rwSramData(0xFF);
    7e66:	8f ef       	ldi	r24, 0xFF	; 255
    7e68:	b7 df       	rcall	.-146    	; 0x7dd8 <rwSramData>
    7e6a:	fe 01       	movw	r30, r28
    7e6c:	31 96       	adiw	r30, 0x01	; 1
    7e6e:	81 83       	std	Z+1, r24	; 0x01
  if( magic == 0x79A5F0C1 ) {
    7e70:	8b 81       	ldd	r24, Y+3	; 0x03
    7e72:	9c 81       	ldd	r25, Y+4	; 0x04
    7e74:	ad 81       	ldd	r26, Y+5	; 0x05
    7e76:	be 81       	ldd	r27, Y+6	; 0x06
    7e78:	81 5c       	subi	r24, 0xC1	; 193
    7e7a:	90 4f       	sbci	r25, 0xF0	; 240
    7e7c:	a5 4a       	sbci	r26, 0xA5	; 165
    7e7e:	b9 47       	sbci	r27, 0x79	; 121
    7e80:	09 f0       	breq	.+2      	; 0x7e84 <checkSram+0x82>
    7e82:	5a c0       	rjmp	.+180    	; 0x7f38 <checkSram+0x136>
//  	flash_led(10);
//	DBG_LED1_ON;
//	DBG_LED2_OFF;

	uint16_t pagenumber = 0;
	uint8_t numPages = imageSize / SPM_PAGESIZE;
    7e84:	89 81       	ldd	r24, Y+1	; 0x01
    7e86:	9a 81       	ldd	r25, Y+2	; 0x02
    7e88:	9c 01       	movw	r18, r24
    7e8a:	22 0f       	add	r18, r18
    7e8c:	23 2f       	mov	r18, r19
    7e8e:	22 1f       	adc	r18, r18
    7e90:	33 0b       	sbc	r19, r19
    7e92:	31 95       	neg	r19
	if( imageSize % SPM_PAGESIZE > 0 )
    7e94:	8f 77       	andi	r24, 0x7F	; 127
    7e96:	90 70       	andi	r25, 0x00	; 0
    7e98:	89 2b       	or	r24, r25
    7e9a:	09 f0       	breq	.+2      	; 0x7e9e <checkSram+0x9c>
		numPages++;
    7e9c:	2f 5f       	subi	r18, 0xFF	; 255
    7e9e:	ee 24       	eor	r14, r14
    7ea0:	ff 24       	eor	r15, r15
//	setSramRead(6);
	for( i=0; i< numPages; i++ ) {
    7ea2:	c2 2e       	mov	r12, r18
    7ea4:	dd 24       	eor	r13, r13
    7ea6:	d6 94       	lsr	r13
    7ea8:	dc 2c       	mov	r13, r12
    7eaa:	cc 24       	eor	r12, r12
    7eac:	d7 94       	ror	r13
    7eae:	c7 94       	ror	r12
{
	uint16_t i;

	eeprom_busy_wait ();

	boot_page_erase (page);
    7eb0:	63 e0       	ldi	r22, 0x03	; 3
    7eb2:	86 2e       	mov	r8, r22
		// Set up little-endian word.

		uint16_t w = *buf++;
		w += (*buf++) << 8;

		boot_page_fill (page + i, w);
    7eb4:	99 24       	eor	r9, r9
    7eb6:	93 94       	inc	r9
	}

	boot_page_write (page);     // Store buffer in flash page.
    7eb8:	55 e0       	ldi	r21, 0x05	; 5
    7eba:	a5 2e       	mov	r10, r21
	boot_spm_busy_wait();       // Wait until the memory is written.

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.

	boot_rww_enable ();
    7ebc:	41 e1       	ldi	r20, 0x11	; 17
    7ebe:	b4 2e       	mov	r11, r20
    7ec0:	37 c0       	rjmp	.+110    	; 0x7f30 <checkSram+0x12e>
	uint16_t pagenumber = 0;
	uint8_t numPages = imageSize / SPM_PAGESIZE;
	if( imageSize % SPM_PAGESIZE > 0 )
		numPages++;
//	setSramRead(6);
	for( i=0; i< numPages; i++ ) {
    7ec2:	00 e0       	ldi	r16, 0x00	; 0
    7ec4:	11 e0       	ldi	r17, 0x01	; 1
		//DBG_LED2_ON;
		// Fill buffer with 256 bytes from SRAM
		srptr = buff;
		int j = 0;
		for( j=0; j < SPM_PAGESIZE; j++ ) {
			*srptr++ = rwSramData(0xFF);
    7ec6:	8f ef       	ldi	r24, 0xFF	; 255
    7ec8:	87 df       	rcall	.-242    	; 0x7dd8 <rwSramData>
    7eca:	f8 01       	movw	r30, r16
    7ecc:	81 93       	st	Z+, r24
    7ece:	8f 01       	movw	r16, r30
 		//DBG_LED1_OFF;
		//DBG_LED2_ON;
		// Fill buffer with 256 bytes from SRAM
		srptr = buff;
		int j = 0;
		for( j=0; j < SPM_PAGESIZE; j++ ) {
    7ed0:	f1 e0       	ldi	r31, 0x01	; 1
    7ed2:	00 38       	cpi	r16, 0x80	; 128
    7ed4:	1f 07       	cpc	r17, r31
    7ed6:	b9 f7       	brne	.-18     	; 0x7ec6 <checkSram+0xc4>

void boot_program_page (uint32_t page, uint8_t *buf)
{
	uint16_t i;

	eeprom_busy_wait ();
    7ed8:	f9 99       	sbic	0x1f, 1	; 31
    7eda:	fe cf       	rjmp	.-4      	; 0x7ed8 <checkSram+0xd6>

	boot_page_erase (page);
    7edc:	f7 01       	movw	r30, r14
    7ede:	87 be       	out	0x37, r8	; 55
    7ee0:	e8 95       	spm
	boot_spm_busy_wait ();      // Wait until the memory is erased.
    7ee2:	07 b6       	in	r0, 0x37	; 55
    7ee4:	00 fc       	sbrc	r0, 0
    7ee6:	fd cf       	rjmp	.-6      	; 0x7ee2 <checkSram+0xe0>
    7ee8:	a7 01       	movw	r20, r14
    7eea:	a0 e0       	ldi	r26, 0x00	; 0
    7eec:	b1 e0       	ldi	r27, 0x01	; 1

	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.

		uint16_t w = *buf++;
    7eee:	2c 91       	ld	r18, X
		w += (*buf++) << 8;
    7ef0:	11 96       	adiw	r26, 0x01	; 1
    7ef2:	8c 91       	ld	r24, X
    7ef4:	11 97       	sbiw	r26, 0x01	; 1
    7ef6:	90 e0       	ldi	r25, 0x00	; 0
    7ef8:	98 2f       	mov	r25, r24
    7efa:	88 27       	eor	r24, r24
    7efc:	82 0f       	add	r24, r18
    7efe:	91 1d       	adc	r25, r1
    "ijmp\n"
  );
}

#ifdef NANODE_SRAM
void checkSram( void ) {
    7f00:	12 96       	adiw	r26, 0x02	; 2
		// Set up little-endian word.

		uint16_t w = *buf++;
		w += (*buf++) << 8;

		boot_page_fill (page + i, w);
    7f02:	fa 01       	movw	r30, r20
    7f04:	0c 01       	movw	r0, r24
    7f06:	97 be       	out	0x37, r9	; 55
    7f08:	e8 95       	spm
    7f0a:	11 24       	eor	r1, r1
    7f0c:	4e 5f       	subi	r20, 0xFE	; 254
    7f0e:	5f 4f       	sbci	r21, 0xFF	; 255
	eeprom_busy_wait ();

	boot_page_erase (page);
	boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
    7f10:	f1 e0       	ldi	r31, 0x01	; 1
    7f12:	a0 38       	cpi	r26, 0x80	; 128
    7f14:	bf 07       	cpc	r27, r31
    7f16:	59 f7       	brne	.-42     	; 0x7eee <checkSram+0xec>
		w += (*buf++) << 8;

		boot_page_fill (page + i, w);
	}

	boot_page_write (page);     // Store buffer in flash page.
    7f18:	f7 01       	movw	r30, r14
    7f1a:	a7 be       	out	0x37, r10	; 55
    7f1c:	e8 95       	spm
	boot_spm_busy_wait();       // Wait until the memory is written.
    7f1e:	07 b6       	in	r0, 0x37	; 55
    7f20:	00 fc       	sbrc	r0, 0
    7f22:	fd cf       	rjmp	.-6      	; 0x7f1e <checkSram+0x11c>

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.

	boot_rww_enable ();
    7f24:	b7 be       	out	0x37, r11	; 55
    7f26:	e8 95       	spm
		//DBG_LED1_ON;
		//DBG_LED2_OFF;
		// Burn page
		boot_program_page(pagenumber,(uint8_t *)buff);

		pagenumber += SPM_PAGESIZE;
    7f28:	80 e8       	ldi	r24, 0x80	; 128
    7f2a:	90 e0       	ldi	r25, 0x00	; 0
    7f2c:	e8 0e       	add	r14, r24
    7f2e:	f9 1e       	adc	r15, r25
	uint16_t pagenumber = 0;
	uint8_t numPages = imageSize / SPM_PAGESIZE;
	if( imageSize % SPM_PAGESIZE > 0 )
		numPages++;
//	setSramRead(6);
	for( i=0; i< numPages; i++ ) {
    7f30:	ec 14       	cp	r14, r12
    7f32:	fd 04       	cpc	r15, r13
    7f34:	09 f0       	breq	.+2      	; 0x7f38 <checkSram+0x136>
    7f36:	c5 cf       	rjmp	.-118    	; 0x7ec2 <checkSram+0xc0>
		boot_program_page(pagenumber,(uint8_t *)buff);

		pagenumber += SPM_PAGESIZE;
	}
  }
}
    7f38:	26 96       	adiw	r28, 0x06	; 6
    7f3a:	0f b6       	in	r0, 0x3f	; 63
    7f3c:	f8 94       	cli
    7f3e:	de bf       	out	0x3e, r29	; 62
    7f40:	0f be       	out	0x3f, r0	; 63
    7f42:	cd bf       	out	0x3d, r28	; 61
    7f44:	cf 91       	pop	r28
    7f46:	df 91       	pop	r29
    7f48:	1f 91       	pop	r17
    7f4a:	0f 91       	pop	r16
    7f4c:	ff 90       	pop	r15
    7f4e:	ef 90       	pop	r14
    7f50:	df 90       	pop	r13
    7f52:	cf 90       	pop	r12
    7f54:	bf 90       	pop	r11
    7f56:	af 90       	pop	r10
    7f58:	9f 90       	pop	r9
    7f5a:	8f 90       	pop	r8
    7f5c:	08 95       	ret

00007f5e <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    7f5e:	80 e0       	ldi	r24, 0x00	; 0
    7f60:	35 df       	rcall	.-406    	; 0x7dcc <watchdogConfig>
#ifdef NANODE_SRAM
  checkSram();
    7f62:	4f df       	rcall	.-354    	; 0x7e02 <checkSram>
#endif

  __asm__ __volatile__ (
    7f64:	ee 27       	eor	r30, r30
    7f66:	ff 27       	eor	r31, r31
    7f68:	09 94       	ijmp

00007f6a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    7f6a:	21 df       	rcall	.-446    	; 0x7dae <getch>
    7f6c:	80 32       	cpi	r24, 0x20	; 32
    7f6e:	09 f0       	breq	.+2      	; 0x7f72 <verifySpace+0x8>
    7f70:	f6 df       	rcall	.-20     	; 0x7f5e <appStart>
  putch(STK_INSYNC);
    7f72:	84 e1       	ldi	r24, 0x14	; 20
}
    7f74:	14 cf       	rjmp	.-472    	; 0x7d9e <putch>
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7f76:	1f 93       	push	r17
    7f78:	18 2f       	mov	r17, r24

00007f7a <getNch>:
  do getch(); while (--count);
    7f7a:	19 df       	rcall	.-462    	; 0x7dae <getch>
    7f7c:	11 50       	subi	r17, 0x01	; 1
    7f7e:	e9 f7       	brne	.-6      	; 0x7f7a <getNch>
  verifySpace();
    7f80:	f4 df       	rcall	.-24     	; 0x7f6a <verifySpace>
}
    7f82:	1f 91       	pop	r17
    7f84:	08 95       	ret
