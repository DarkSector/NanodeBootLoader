
optiboot_nanode328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00008006  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000048e  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000240  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000182  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000009c  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016f  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000269  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:

//  DBG_LED1_ON;
//  DBG_LED2_OFF;

  // Adaboot no-wait mod
  ch = MCUSR;
    7e00:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e02:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7e04:	81 ff       	sbrs	r24, 1
    7e06:	ea d0       	rcall	.+468    	; 0x7fdc <appStart>
    7e08:	85 e0       	ldi	r24, 0x05	; 5

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e0a:	80 93 81 00 	sts	0x0081, r24
    7e0e:	82 e0       	ldi	r24, 0x02	; 2
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7e10:	80 93 c0 00 	sts	0x00C0, r24
    7e14:	88 e1       	ldi	r24, 0x18	; 24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7e16:	80 93 c1 00 	sts	0x00C1, r24
    7e1a:	96 e0       	ldi	r25, 0x06	; 6
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7e1c:	90 93 c2 00 	sts	0x00C2, r25
    7e20:	90 e1       	ldi	r25, 0x10	; 16
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e22:	90 93 c4 00 	sts	0x00C4, r25
    7e26:	80 93 60 00 	sts	0x0060, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e2a:	8e e0       	ldi	r24, 0x0E	; 14
  WDTCSR = x;
    7e2c:	80 93 60 00 	sts	0x0060, r24
    7e30:	25 9a       	sbi	0x04, 5	; 4

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e32:	26 e0       	ldi	r18, 0x06	; 6
    7e34:	80 e3       	ldi	r24, 0x30	; 48
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e36:	9c ef       	ldi	r25, 0xFC	; 252
    7e38:	31 e0       	ldi	r19, 0x01	; 1
    TIFR1 = _BV(TOV1);
    7e3a:	90 93 85 00 	sts	0x0085, r25
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e3e:	80 93 84 00 	sts	0x0084, r24
    7e42:	36 bb       	out	0x16, r19	; 22
    TIFR1 = _BV(TOV1);
    7e44:	b0 9b       	sbis	0x16, 0	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e46:	fe cf       	rjmp	.-4      	; 0x7e44 <main+0x44>
    7e48:	1d 9a       	sbi	0x03, 5	; 3
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e4a:	a8 95       	wdr
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e4c:	21 50       	subi	r18, 0x01	; 1
    7e4e:	a9 f7       	brne	.-22     	; 0x7e3a <main+0x3a>
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e50:	08 e1       	ldi	r16, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e52:	98 e0       	ldi	r25, 0x08	; 8
  WDTCSR = x;
    7e54:	f9 2e       	mov	r15, r25
    7e56:	ee 24       	eor	r14, r14
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e58:	e3 94       	inc	r14
    7e5a:	25 e0       	ldi	r18, 0x05	; 5
        addrPtr += 2;
      } while (--ch);
     
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7e5c:	d2 2e       	mov	r13, r18
    7e5e:	31 e1       	ldi	r19, 0x11	; 17
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7e60:	c3 2e       	mov	r12, r19
    7e62:	13 e0       	ldi	r17, 0x03	; 3
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7e64:	a6 d0       	rcall	.+332    	; 0x7fb2 <getch>
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e66:	81 34       	cpi	r24, 0x41	; 65
    7e68:	29 f4       	brne	.+10     	; 0x7e74 <main+0x74>

    if(ch == STK_GET_PARAMETER) {
    7e6a:	81 e0       	ldi	r24, 0x01	; 1
    7e6c:	c5 d0       	rcall	.+394    	; 0x7ff8 <getNch>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    7e6e:	83 e0       	ldi	r24, 0x03	; 3
    7e70:	99 d0       	rcall	.+306    	; 0x7fa4 <putch>
    7e72:	95 c0       	rjmp	.+298    	; 0x7f9e <main+0x19e>
      putch(0x03);
    7e74:	82 34       	cpi	r24, 0x42	; 66
    7e76:	19 f4       	brne	.+6      	; 0x7e7e <main+0x7e>
    7e78:	84 e1       	ldi	r24, 0x14	; 20
    7e7a:	be d0       	rcall	.+380    	; 0x7ff8 <getNch>
    }
    else if(ch == STK_SET_DEVICE) {
    7e7c:	90 c0       	rjmp	.+288    	; 0x7f9e <main+0x19e>
    7e7e:	85 34       	cpi	r24, 0x45	; 69
      // SET DEVICE is ignored
      getNch(20);
    7e80:	19 f4       	brne	.+6      	; 0x7e88 <main+0x88>
    7e82:	85 e0       	ldi	r24, 0x05	; 5
    7e84:	b9 d0       	rcall	.+370    	; 0x7ff8 <getNch>
    7e86:	8b c0       	rjmp	.+278    	; 0x7f9e <main+0x19e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e88:	85 35       	cpi	r24, 0x55	; 85
    7e8a:	71 f4       	brne	.+28     	; 0x7ea8 <main+0xa8>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e8c:	92 d0       	rcall	.+292    	; 0x7fb2 <getch>
    7e8e:	c8 2f       	mov	r28, r24
    7e90:	90 d0       	rcall	.+288    	; 0x7fb2 <getch>
    7e92:	2c 2f       	mov	r18, r28
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7e94:	30 e0       	ldi	r19, 0x00	; 0
    7e96:	38 2b       	or	r19, r24
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7e98:	22 0f       	add	r18, r18
    7e9a:	33 1f       	adc	r19, r19
    7e9c:	30 93 01 02 	sts	0x0201, r19
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7ea0:	20 93 00 02 	sts	0x0200, r18
    7ea4:	a3 d0       	rcall	.+326    	; 0x7fec <verifySpace>
    7ea6:	7b c0       	rjmp	.+246    	; 0x7f9e <main+0x19e>
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7ea8:	86 35       	cpi	r24, 0x56	; 86
    7eaa:	29 f4       	brne	.+10     	; 0x7eb6 <main+0xb6>
      address = newAddress;
    7eac:	84 e0       	ldi	r24, 0x04	; 4
    7eae:	a4 d0       	rcall	.+328    	; 0x7ff8 <getNch>
    7eb0:	80 e0       	ldi	r24, 0x00	; 0
    7eb2:	78 d0       	rcall	.+240    	; 0x7fa4 <putch>
      verifySpace();
    7eb4:	74 c0       	rjmp	.+232    	; 0x7f9e <main+0x19e>
    7eb6:	84 36       	cpi	r24, 0x64	; 100
    7eb8:	09 f0       	breq	.+2      	; 0x7ebc <main+0xbc>
    }
    else if(ch == STK_UNIVERSAL) {
    7eba:	46 c0       	rjmp	.+140    	; 0x7f48 <main+0x148>
    7ebc:	84 d0       	rcall	.+264    	; 0x7fc6 <getLen>
      // UNIVERSAL command is ignored
      getNch(4);
    7ebe:	e0 91 00 02 	lds	r30, 0x0200
    7ec2:	f0 91 01 02 	lds	r31, 0x0201
      putch(0x00);
    7ec6:	e1 15       	cp	r30, r1
    7ec8:	80 e7       	ldi	r24, 0x70	; 112
    7eca:	f8 07       	cpc	r31, r24
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ecc:	10 f4       	brcc	.+4      	; 0x7ed2 <main+0xd2>
    7ece:	17 bf       	out	0x37, r17	; 55
    7ed0:	e8 95       	spm
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getLen();
    7ed2:	c0 e0       	ldi	r28, 0x00	; 0
    7ed4:	d1 e0       	ldi	r29, 0x01	; 1

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7ed6:	6d d0       	rcall	.+218    	; 0x7fb2 <getch>
    7ed8:	89 93       	st	Y+, r24
    7eda:	80 91 02 02 	lds	r24, 0x0202
    7ede:	81 50       	subi	r24, 0x01	; 1
    7ee0:	80 93 02 02 	sts	0x0202, r24
    7ee4:	81 11       	cpse	r24, r1
    7ee6:	f7 cf       	rjmp	.-18     	; 0x7ed6 <main+0xd6>
    7ee8:	e0 91 00 02 	lds	r30, 0x0200

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7eec:	f0 91 01 02 	lds	r31, 0x0201
      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
     
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ef0:	e1 15       	cp	r30, r1
    7ef2:	80 e7       	ldi	r24, 0x70	; 112
      while (--length);
    7ef4:	f8 07       	cpc	r31, r24
    7ef6:	10 f0       	brcs	.+4      	; 0x7efc <main+0xfc>
    7ef8:	17 bf       	out	0x37, r17	; 55
    7efa:	e8 95       	spm
    7efc:	77 d0       	rcall	.+238    	; 0x7fec <verifySpace>
    7efe:	07 b6       	in	r0, 0x37	; 55
    7f00:	00 fc       	sbrc	r0, 0

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7f02:	fd cf       	rjmp	.-6      	; 0x7efe <main+0xfe>
    7f04:	40 91 00 02 	lds	r20, 0x0200
    7f08:	50 91 01 02 	lds	r21, 0x0201
    7f0c:	9a 01       	movw	r18, r20
    7f0e:	a0 e0       	ldi	r26, 0x00	; 0
    7f10:	b1 e0       	ldi	r27, 0x01	; 1
    7f12:	8c 91       	ld	r24, X
    7f14:	12 96       	adiw	r26, 0x02	; 2

      // Read command terminator, start reply
      verifySpace();
    7f16:	fd 01       	movw	r30, r26
    7f18:	31 97       	sbiw	r30, 0x01	; 1
     
      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7f1a:	60 81       	ld	r22, Z
    7f1c:	90 e0       	ldi	r25, 0x00	; 0
    7f1e:	96 2b       	or	r25, r22
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
    7f20:	f9 01       	movw	r30, r18
    7f22:	0c 01       	movw	r0, r24
    7f24:	e7 be       	out	0x37, r14	; 55
    7f26:	e8 95       	spm
    7f28:	11 24       	eor	r1, r1
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
    7f2a:	2e 5f       	subi	r18, 0xFE	; 254
    7f2c:	3f 4f       	sbci	r19, 0xFF	; 255
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7f2e:	a0 38       	cpi	r26, 0x80	; 128
    7f30:	f1 e0       	ldi	r31, 0x01	; 1
    7f32:	bf 07       	cpc	r27, r31
    7f34:	71 f7       	brne	.-36     	; 0x7f12 <main+0x112>
        a |= (*bufPtr++) << 8;
    7f36:	fa 01       	movw	r30, r20
    7f38:	d7 be       	out	0x37, r13	; 55
    7f3a:	e8 95       	spm
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f3c:	07 b6       	in	r0, 0x37	; 55
    7f3e:	00 fc       	sbrc	r0, 0
    7f40:	fd cf       	rjmp	.-6      	; 0x7f3c <main+0x13c>
    7f42:	c7 be       	out	0x37, r12	; 55
    7f44:	e8 95       	spm
        addrPtr += 2;
    7f46:	2b c0       	rjmp	.+86     	; 0x7f9e <main+0x19e>
    7f48:	84 37       	cpi	r24, 0x74	; 116
      } while (--ch);
    7f4a:	b1 f4       	brne	.+44     	; 0x7f78 <main+0x178>
    7f4c:	3c d0       	rcall	.+120    	; 0x7fc6 <getLen>
    7f4e:	4e d0       	rcall	.+156    	; 0x7fec <verifySpace>
    7f50:	e0 91 00 02 	lds	r30, 0x0200
     
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7f54:	f0 91 01 02 	lds	r31, 0x0201
      boot_spm_busy_wait();
    7f58:	cf 01       	movw	r24, r30
    7f5a:	01 96       	adiw	r24, 0x01	; 1
    7f5c:	90 93 01 02 	sts	0x0201, r25

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7f60:	80 93 00 02 	sts	0x0200, r24
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f64:	84 91       	lpm	r24, Z
    7f66:	1e d0       	rcall	.+60     	; 0x7fa4 <putch>
      // READ PAGE - we only read flash
      getLen();
    7f68:	80 91 02 02 	lds	r24, 0x0202
      verifySpace();
    7f6c:	81 50       	subi	r24, 0x01	; 1
    7f6e:	80 93 02 02 	sts	0x0202, r24
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7f72:	81 11       	cpse	r24, r1
    7f74:	ed cf       	rjmp	.-38     	; 0x7f50 <main+0x150>
    7f76:	13 c0       	rjmp	.+38     	; 0x7f9e <main+0x19e>
    7f78:	85 37       	cpi	r24, 0x75	; 117
    7f7a:	41 f4       	brne	.+16     	; 0x7f8c <main+0x18c>
    7f7c:	37 d0       	rcall	.+110    	; 0x7fec <verifySpace>
    7f7e:	8e e1       	ldi	r24, 0x1E	; 30
    7f80:	11 d0       	rcall	.+34     	; 0x7fa4 <putch>
    7f82:	85 e9       	ldi	r24, 0x95	; 149
    7f84:	0f d0       	rcall	.+30     	; 0x7fa4 <putch>
    7f86:	8f e0       	ldi	r24, 0x0F	; 15
    7f88:	0d d0       	rcall	.+26     	; 0x7fa4 <putch>
      while (--length);
    7f8a:	09 c0       	rjmp	.+18     	; 0x7f9e <main+0x19e>
    7f8c:	81 35       	cpi	r24, 0x51	; 81
    7f8e:	31 f4       	brne	.+12     	; 0x7f9c <main+0x19c>
    7f90:	00 93 60 00 	sts	0x0060, r16
    7f94:	f0 92 60 00 	sts	0x0060, r15
    7f98:	29 d0       	rcall	.+82     	; 0x7fec <verifySpace>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f9a:	01 c0       	rjmp	.+2      	; 0x7f9e <main+0x19e>
    7f9c:	27 d0       	rcall	.+78     	; 0x7fec <verifySpace>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f9e:	80 e1       	ldi	r24, 0x10	; 16
    7fa0:	01 d0       	rcall	.+2      	; 0x7fa4 <putch>
      putch(SIGNATURE_0);
    7fa2:	60 cf       	rjmp	.-320    	; 0x7e64 <main+0x64>

00007fa4 <putch>:
    7fa4:	90 91 c0 00 	lds	r25, 0x00C0
      putch(SIGNATURE_1);
    7fa8:	95 ff       	sbrs	r25, 5
    7faa:	fc cf       	rjmp	.-8      	; 0x7fa4 <putch>
    7fac:	80 93 c6 00 	sts	0x00C6, r24
      putch(SIGNATURE_2);
    7fb0:	08 95       	ret

00007fb2 <getch>:
    7fb2:	a8 95       	wdr
    7fb4:	1d 9a       	sbi	0x03, 5	; 3
    }
    else if (ch == 'Q') {
    7fb6:	80 91 c0 00 	lds	r24, 0x00C0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fba:	87 ff       	sbrs	r24, 7
    7fbc:	fc cf       	rjmp	.-8      	; 0x7fb6 <getch+0x4>
  WDTCSR = x;
    7fbe:	80 91 c6 00 	lds	r24, 0x00C6
      putch(SIGNATURE_2);
    }
    else if (ch == 'Q') {
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    7fc2:	1d 9a       	sbi	0x03, 5	; 3
    7fc4:	08 95       	ret

00007fc6 <getLen>:
    7fc6:	f5 df       	rcall	.-22     	; 0x7fb2 <getch>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7fc8:	f4 df       	rcall	.-24     	; 0x7fb2 <getch>
    7fca:	80 93 02 02 	sts	0x0202, r24
    }
    putch(STK_OK);
    7fce:	f1 cf       	rjmp	.-30     	; 0x7fb2 <getch>

00007fd0 <watchdogConfig>:
    7fd0:	e0 e6       	ldi	r30, 0x60	; 96
  }
    7fd2:	f0 e0       	ldi	r31, 0x00	; 0
#endif

uint8_t getLen() {
  getch();
  length = getch();
  return getch();
    7fd4:	98 e1       	ldi	r25, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fd6:	90 83       	st	Z, r25
    7fd8:	80 83       	st	Z, r24
    7fda:	08 95       	ret

00007fdc <appStart>:
    7fdc:	e0 e6       	ldi	r30, 0x60	; 96
  WDTCSR = x;
    7fde:	f0 e0       	ldi	r31, 0x00	; 0
    7fe0:	88 e1       	ldi	r24, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fe2:	80 83       	st	Z, r24
    7fe4:	10 82       	st	Z, r1
    7fe6:	ee 27       	eor	r30, r30
    7fe8:	ff 27       	eor	r31, r31
  WDTCSR = x;
    7fea:	09 94       	ijmp

00007fec <verifySpace>:
  watchdogConfig(WATCHDOG_OFF);
#ifdef NANODE_SRAM
  checkSram();
#endif

  __asm__ __volatile__ (
    7fec:	e2 df       	rcall	.-60     	; 0x7fb2 <getch>
    7fee:	80 32       	cpi	r24, 0x20	; 32
    7ff0:	09 f0       	breq	.+2      	; 0x7ff4 <verifySpace+0x8>
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    7ff2:	f4 df       	rcall	.-24     	; 0x7fdc <appStart>
    7ff4:	84 e1       	ldi	r24, 0x14	; 20
    7ff6:	d6 cf       	rjmp	.-84     	; 0x7fa4 <putch>

00007ff8 <getNch>:
    7ff8:	cf 93       	push	r28
    7ffa:	c8 2f       	mov	r28, r24
    7ffc:	da df       	rcall	.-76     	; 0x7fb2 <getch>
  putch(STK_INSYNC);
    7ffe:	c1 50       	subi	r28, 0x01	; 1
    8000:	e9 f7       	brne	.-6      	; 0x7ffc <getNch+0x4>
    8002:	cf 91       	pop	r28
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    8004:	f3 cf       	rjmp	.-26     	; 0x7fec <verifySpace>
